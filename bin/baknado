#!/usr/bin/env ruby
require 'stornado'
require 'baknado'
require 'syslog'

Syslog.open("baknado", Syslog::LOG_PID, Syslog::LOG_DAEMON | Syslog::LOG_LOCAL3)
Syslog.log(Syslog::LOG_INFO, "starting baknado")


splitq = DirQueue.new('/tmp/backup/split', Regexp.new('\w'), 'split')
upload_handler = StornadoUploadHandler.new({}, splitq)
split_handler = SplitHandler.new(splitq)
split_handler.chunk_size = 1 * 1024 * 1024
ready = DirQueue.new('/tmp/backup/ready', Regexp.new('\.msg.json'), 'ready')
processing = DirQueue.new('/tmp/backup/processing', Regexp.new('\.msg.json'), 'processing')
complete = DirQueue.new('/tmp/backup/complete', Regexp.new('\.msg.json'), 'complete')
prepper = QueueWorker.new(ready, processing, split_handler)
shipper = QueueWorker.new(processing, complete, upload_handler)


Signal.trap("TERM") do
  Syslog.log(Syslog::LOG_INFO, "Received TERM, shutting down")
  exit 0
end

ship = Thread.new { 
  $stderr.puts "Starting upload watcher."
  while true
    begin
      shipper.work 
    rescue Exception => e
      Syslog.log(Syslog::LOG_ERR, "Exception in upload thread.")
      $stderr.puts e.backtrace
    end
    sleep 1
  end
}

prep = Thread.new { 
  $stderr.puts "Starting prep watcher."
  while true
    begin
      prepper.work 
    rescue
      Syslog.log(Syslog::LOG_ERR, "Exception in prep thread.")
    end
    sleep 1
  end
}

ship.join

prep.join
