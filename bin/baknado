#!/usr/bin/env ruby
require 'stornado'
require 'baknado'
require 'syslog'

Syslog.open("baknado", Syslog::LOG_PID, Syslog::LOG_DAEMON | Syslog::LOG_LOCAL3)
Syslog.log(Syslog::LOG_WARN, "starting baknado")

working_dir = ENV['BAKNADO_DIR'] || '/data/baknado'

if ! Dir.exist?(working_dir)
   Dir.mkdir(working_dir)
   Syslog.log(Syslog::LOG_INFO, "creating working directory #{working_dir}")
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: stornado [options]"
  opts.on("-r FILE", "Repo config file") do |f|
    options[:repo_config] = f
  end

  opts.on("-p PROXY", "DEPRECATED") do |p|
    puts "The -p option is deprecated.  Set the HTTP_PROXY environment variable"
    options[:proxy] = p
  end

  opts.on("-d", "enable debugging") do |d|
    options[:debug] = d
    puts "Debug is #{options[:debug]}"
  end
end.parse!

splitq = DirQueue.new("#{working_dir}/split", Regexp.new('\w'), 'split')
upload_handler = StornadoUploadHandler.new(options, splitq)
split_handler = SplitHandler.new(splitq)
split_handler.chunk_size = ENV['BAKNADO_CHUNK_SIZE'] || 5 * 1024**3
ready = DirQueue.new("#{working_dir}/ready", Regexp.new('\.msg.json'), 'ready')
transfer = DirQueue.new("#{working_dir}/transfer", Regexp.new('\.msg.json'), 'transfer')
complete = DirQueue.new("#{working_dir}/complete", Regexp.new('\.msg.json'), 'complete')
prepper = QueueWorker.new(ready, transfer, split_handler)
shipper = QueueWorker.new(transfer, complete, upload_handler)

Signal.trap("TERM") do
  Syslog.log(Syslog::LOG_INFO, "Received TERM, shutting down")
  exit 0
end

ship = Thread.new { 
  $stderr.puts "Starting upload watcher."
  while true
    begin
      shipper.work 
    rescue Exception => e
      Syslog.log(Syslog::LOG_ERR, "exception in upload thread - #{e.backtrace}.")
    end
    sleep 1
  end
}
Syslog.log(Syslog::LOG_WARN, "started upload thread")

prep = Thread.new { 
  $stderr.puts "Starting prep watcher."
  while true
    begin
      prepper.work 
    rescue Exception => e
      Syslog.log(Syslog::LOG_ERR, "exception in prep thread - #{e.backtrace}.")
    end
    sleep 1
  end
}
  Syslog.log(Syslog::LOG_WARN, "starting prep thread")

ship.join

prep.join
